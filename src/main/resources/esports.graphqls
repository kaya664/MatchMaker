type Query {
    tournaments: [TournamentDTO]
}

input UserInput {
    userName: ID!
    password: String!
}

input UserAuthenticationRequest {
    user: UserInput!
}

type UserAuthenticationRepsonse {
    token: String
}

input UserRegistrationRequest {
    user: UserInput
}

type UserDTO {
    userName: ID!
    password: String!
}

type UserRegistrationResponse {
    registeredUser: UserDTO
}

input TournamentInput {
    name: String!,
    gameName: String!,
    paymentType: String!,
    paymentCurrency: String!,
    eliminationType: String!,
    status: String!,
    explanation: String!
}

type TournamentDTO {
    id: ID!
    name: String!,
    gameName: String!,
    paymentType: String!,
    paymentCurrency: String!,
    eliminationType: String!,
    status: String!,
    explanation: String!
}

input TournamentEditDTO {
    id: ID!
    name: String!,
    gameName: String!,
    paymentType: String!,
    paymentCurrency: String!,
    eliminationType: String!,
    status: String!,
    explanation: String!
}

input TournamentCreationRequest {
    tournament: TournamentInput
}

type TournamentCreationResponse {
    createdTournament: TournamentDTO
}

input TournamentEditRequest {
    tournament: TournamentEditDTO
}

type TournamentEditResponse {
    editedTournament: TournamentDTO
}

input TournamentJoiningRequest {
    tournamentId: String!
}

type TournamentJoiningResponse {
    tournamentId: String!
    userName: String!
}

type Mutation {
    register(userRegistrationRequest: UserRegistrationRequest) : UserRegistrationResponse
    authenticate(userAuthenticationRequest: UserAuthenticationRequest!) : UserAuthenticationRepsonse!
    createTournament(tournamentCreationRequest: TournamentCreationRequest!): TournamentCreationResponse
    editTournament(tournamentEditRequest: TournamentEditRequest!): TournamentEditResponse
    joinTournament(tournamentJoinRequest: TournamentJoiningRequest): TournamentJoiningResponse
}

