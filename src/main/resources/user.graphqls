type Query {
    tournaments: [Tournament]
}

type Tournament {
    id: String
    name: String,
    gameName: String,
    paymentType: String,
    paymentCurrency: String,
    eliminationType: String,
    status: String,
    explanation: String
}

type User {
    userName: String!
    name: String!
    email: String!
    password: String!
    country: String!
}

input AuthenticationRequest {
    userName: String!
    password: String!
}

type AuthenticationRepsonse {
    token: String
}

input RegistrationRequest {
    userName: String!
    name: String!
    email: String!
    password: String!
    country: String!
}

type RegistrationResponse {
    result: String
}

input TournamentCreationRequest {
    name: String!,
    gameName: String!,
    paymentType: String!,
    paymentCurrency: String!,
    eliminationType: String!,
    status: String!,
    explanation: String!
}

type TournamentCreationResponse {
    result: String
}

input TournamentEditRequest {
    tournamentId: String
    name: String,
    gameName: String,
    paymentType: String,
    paymentCurrency: String,
    eliminationType: String,
    status: String,
    explanation: String
}

type TournamentEditResponse {
    result: String
}

type Mutation {
    authenticate(authenticationRequest: AuthenticationRequest!) : AuthenticationRepsonse!
    register(registrationRequest: RegistrationRequest) : RegistrationResponse
    createTournament(tournamentCreationRequest: TournamentCreationRequest!): TournamentCreationResponse
    editTournament(tournamentEditRequest: TournamentEditRequest!): TournamentEditResponse
}

